package com.chihuasdevs.copier.views;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */



import com.chihuasdevs.utils.JTableUtils;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import models.CopyTask;
import models.Project;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.buildobjects.process.ExternalProcessFailureException;
import org.buildobjects.process.ProcBuilder;
import org.buildobjects.process.ProcResult;

/**
 *
 * @author aogutier
 */
public class Copier extends javax.swing.JFrame implements FileChooserDelegate {
    
    //  /Users/aogutier/Development/iOS/AforeMovil/aforemovil/Utils/ExtFrameWorks/Daon Frameworks/Daon.bundle
    //  /Users/aogutier/Desktop/trash/cpy test/1
    
    private enum Mode{
        OpeningProject,
        SavingProject
    }
    
    private List<CopyTask> copyTasks = new ArrayList<>();
    private Mode mode;

    /**
     * Creates new form Copier
     */
    public Copier() {
        initComponents();
        
    }
    
    
    private CopyTask getCopyTaskFromForm(){
        CopyTask copyTask = new CopyTask();
        copyTask.setDestination(DestinationTxt.getText());
        copyTask.setOrigin(originTxt.getText());
        
        return copyTask;
    }
    
    private void printAllCopyTasks(){
        int i = 0;
        for (CopyTask copyTask : copyTasks){
            i++;
            System.out.println("Task number: "+i+" ******");
            System.out.println(ToStringBuilder.reflectionToString(copyTask));
            System.out.println("**************************");
        }
    }
    
    private String executeCommand(String command) throws ExternalProcessFailureException{

        ProcResult result = new ProcBuilder("bash")
        .withArgs("-c", command)
        .run();
        System.out.println(result.getOutputString());


        return result.getOutputString();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jLabel1 = new javax.swing.JLabel();
        projectNameTxt = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        copyTasksTbe = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        originTxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        DestinationTxt = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        copyAllBtn = new javax.swing.JButton();
        deleteSelectedBtn = new javax.swing.JButton();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Project Name:");

        copyTasksTbe.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Origin", "Destination path", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        copyTasksTbe.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                copyTasksTbeKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(copyTasksTbe);

        jLabel2.setText("File/Directory to copy:");

        jLabel3.setText("Destination path:");

        jButton1.setText("Add");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        copyAllBtn.setText("Copy all");
        copyAllBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyAllBtnActionPerformed(evt);
            }
        });

        deleteSelectedBtn.setText("Delete selected");
        deleteSelectedBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSelectedBtnActionPerformed(evt);
            }
        });

        jMenu3.setText("File");

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem2.setText("Open project");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem2);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem1.setText("Save project");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        jMenuBar2.add(jMenu3);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(deleteSelectedBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 786, Short.MAX_VALUE)
                            .addComponent(copyAllBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(DestinationTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 612, Short.MAX_VALUE)
                                            .addComponent(originTxt)
                                            .addComponent(projectNameTxt, javax.swing.GroupLayout.Alignment.TRAILING))))
                                .addGap(14, 14, 14)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(projectNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(originTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(DestinationTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteSelectedBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(copyAllBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        copyTasks.add(getCopyTaskFromForm());
        System.out.println("copyTask added ");
        System.out.println(ToStringBuilder.reflectionToString(getCopyTaskFromForm()));
        System.out.println("All copy tasks ");
        printAllCopyTasks();
        reloadCopyTasksTbe(false);
    }//GEN-LAST:event_jButton1ActionPerformed

  
    
    private void copyAllBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyAllBtnActionPerformed
        // TODO add your handling code here:
        
        for (CopyTask copyTask : copyTasks){
            try {
                String originFile = "\""+ copyTask.getOrigin()+ "\"";
                String destFile = "\""+copyTask.getDestination() + "\"";
                String command = "cp -R "+originFile+" "+destFile ;
                
                this.executeCommand(command);
                copyTask.setStatus("OK :)");
            } catch (ExternalProcessFailureException ex) {
                Logger.getLogger(Copier.class.getName()).log(Level.SEVERE, null, ex);
                copyTask.setStatus("Error :(");
            }
        }
        
        printAllCopyTasks();
        reloadCopyTasksTbe(false);
        
    }//GEN-LAST:event_copyAllBtnActionPerformed

    private void copyTasksTbeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_copyTasksTbeKeyPressed
        // TODO add your handling code here:
        System.out.print(evt.getExtendedKeyCode());
        
    }//GEN-LAST:event_copyTasksTbeKeyPressed

    private void deleteSelectedBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSelectedBtnActionPerformed
 
        DefaultTableModel model = (DefaultTableModel) this.copyTasksTbe.getModel();
        if (this.copyTasksTbe.getRowCount() > 0) {
            if (this.copyTasksTbe.getSelectedRowCount() > 0) {
                int selectedRow[] = this.copyTasksTbe.getSelectedRows();
                for (int i=selectedRow.length-1; i>=0; i--) {
                    model.removeRow(i);
                    this.copyTasks.remove(i);
                }
            }
        }
        
        //this.reloadCopyTasksTbe();
    }//GEN-LAST:event_deleteSelectedBtnActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        mode = Mode.SavingProject;
        java.awt.EventQueue.invokeLater(() -> {
            new FileChooserView(this,true, JFileChooser.DIRECTORIES_ONLY, this).setVisible(true);
        });
        
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        mode = Mode.OpeningProject;
        java.awt.EventQueue.invokeLater(() -> {
            new FileChooserView(this,true, new FileNameExtensionFilter("*.copier", "copier"), this).setVisible(true);
            
        });
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    
    private void reloadCopyTasksTbe(boolean cleanStatuses){
        
        DefaultTableModel dtm = JTableUtils.getEmptyDefaultTableModel(copyTasksTbe);
        
        AtomicInteger indice = new AtomicInteger();
     
  
        copyTasks.forEach((CopyTask copyTask) -> {
            if (cleanStatuses){
                copyTask.setStatus("");
            }
            
            dtm.addRow(new Object[0]);
            dtm.setValueAt(copyTask.getOrigin(), indice.get(), JTableUtils.getColumnByName(copyTasksTbe, "Origin"));
            dtm.setValueAt(copyTask.getDestination(), indice.get(), JTableUtils.getColumnByName(copyTasksTbe, "Destination path"));           
            dtm.setValueAt(copyTask.getStatus(), indice.get(), JTableUtils.getColumnByName(copyTasksTbe, "Status"));
      
            indice.incrementAndGet();
        });

    }
    
    private void saveProject(String path){
        
        if (projectNameTxt.getText().replace(" ", "").length() == 0){
            String projectName = JOptionPane.showInputDialog("Please enter the project name");
            if (projectName.replace(" ", "").isEmpty()){
                return;
            }
            projectNameTxt.setText(projectName);
        }
        
        //TODO: when select files is supported modfy this
        Project project = new Project();
        project.setName(this.projectNameTxt.getText());
        project.setCopyTasks(copyTasks);
        String json =  new Gson().toJson(project);
        FileWriter file = null; 
        try {
            
            // Constructs a FileWriter given a file name, using the platform's default charset
            file = new FileWriter(path+"/"+projectNameTxt.getText()+".project.copier");
            file.write(json);

 
        } catch (IOException e) {
            e.printStackTrace();
 
        } finally {
 
            try {
                if (file != null){
                    file.flush();
                    file.close();
                }
                
            } catch (IOException e) {

                e.printStackTrace();
            }
        }
    }
    
    private void loadProject(String path) {
        
        try {
            final java.lang.reflect.Type PROJECT_TYPE = new TypeToken<Project>() {}.getType();
            Gson gson = new Gson();
            JsonReader reader = new JsonReader(new FileReader(path));
            Project project = gson.fromJson(reader, PROJECT_TYPE);
            this.projectNameTxt.setText(project.getName());
            this.copyTasks = project.getCopyTasks();
            reloadCopyTasksTbe(true);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Copier.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Copier.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Copier.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Copier.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Copier.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Copier().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField DestinationTxt;
    private javax.swing.JButton copyAllBtn;
    private javax.swing.JTable copyTasksTbe;
    private javax.swing.JButton deleteSelectedBtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField originTxt;
    private javax.swing.JTextField projectNameTxt;
    // End of variables declaration//GEN-END:variables

    @Override
    public void onSelected(String path) {
        switch (mode) {
            case SavingProject:
                saveProject(path);
                break;
            case OpeningProject:
                loadProject(path);
                break;
                        
        }
        
    }
}
